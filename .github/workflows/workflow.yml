name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build the docker-compose stack
        run: |
          echo "DATABASE_URL=postgresql://di_website:${{ secrets.DB_PASSWORD }}@db/di_website" > .env
          docker volume create --name=diwebsite_db
          docker volume create --name="index_db"
          docker-compose -f docker-compose.dev.minimal.yml run blue /bin/sh -c "python3 -m coverage run manage.py test && python3 -m coverage xml && mv coverage.xml shared" && cd shared && python3 -m codecov

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: contains('
      refs/heads/master
      refs/heads/develop
      ', github.ref)
    steps:
      - uses: actions/checkout@v2
      - name: zip deploy script
        run: |
          mkdir deploy_script
          cp deploy.sh deploy_script
          tar -cvf deploy.tar deploy_script

      - name: Set env for develop branch
        if: endsWith(github.ref, '/develop')
        run: |
          echo "ENVIRONMENT=${{ secrets.DEV_ENV }}" >> $GITHUB_ENV
          echo "HOST=${{ secrets.DEV_HOST }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
          echo "BRANCH=${{ secrets.DEV_BRANCH }}" >> $GITHUB_ENV

      - name: Set env for master branch
        if: endsWith(github.ref, '/master')
        run: |
          echo "ENVIRONMENT=${{ secrets.PROD_ENV }}" >> $GITHUB_ENV
          echo "HOST=${{ secrets.PROD_HOST }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
          echo "BRANCH=${{ secrets.PROD_BRANCH }}" >> $GITHUB_ENV

      - name: copy deploy file via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.KEY }}
          source: 'deploy_script'
          target: '.'
